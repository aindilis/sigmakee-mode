(list 
      (concat "<\\(\\|rdfs?:\\|sigmakee:\\)\\(" 
	      "\\(\\(Object\\|Datatype\\|Transitive\\|Unambiguous\\|Unique\\|Constraint\\|\\)Property\\)"
	      "\\|\\(Class\\)\\)"
	      "\\s-+\\(rdf:\\|\\)\\(ID\\|about\\)\\s-*=\\s-*\""
	      "\\([^\"]*\\)\"")

      '(1 sigmakee-normal-face t)
      '(2 sigmakee-keyword-face t)      
      '(6 sigmakee-normal-face t)
      '(7 sigmakee-keyword-face t)
      (list 8 
	    '(if (match-beginning 5) 
		'sigmakee-class-face ; blue
	      'sigmakee-property-face) ; purple
	    t)
      )

     ;; still need these -  for closing tags and starts w/o attributes
     (list 
      (concat "</?\\(\\|rdfs?:\\|sigmakee:\\)"
	      "\\(Class\\|"
	      "\\(Transitive\\|Unambiguous\\|Unique\\|"
	      "Constraint\\|Object\\|Datatype\\)?Property\\)" )

	   '(1 sigmakee-normal-face t)
	   '(2 sigmakee-keyword-face t))

;;;  rdfs:domain, range, subClassOf take Class as resources     
;;;  plus other sigmakee keywords that take class URI as object 
;;;      toClass disjointWith sameClassAs  hasClass
;;; (by merging regexps, we are lax with rdfs: vs sigmakee: 
;;; on the latter set)

     (list 
      (concat "<\\(\\|rdfs:\\|sigmakee:\\)" ; 1
	      "\\(domain\\|range\\|\\(to\\|has\\)Class\\|"
	      "disjointWith\\|sameClassAs\\|"
	      "\\(subClass\\|complement\\)Of\\)" ; end 2, 5
	      "\\s-+\\(rdf:resource\\)\\s-*=\\s-*\"" ; 6
	      "[^\"#]*\\([^\"]*\\)\""
	      )
      '(1 sigmakee-normal-face t)
      '(2 sigmakee-keyword-face t)
      '(5 sigmakee-normal-face t)
      '(6 sigmakee-class-ref-face t t)
      )

     (list 
      (concat "<\\(\\|sigmakee:\\)" ; 1
	      "\\(hasValue\\)"
	      )
      '(1 sigmakee-normal-face t)
      '(2 sigmakee-keyword-face t)
      )
     (list 
      (concat "<\\(\\|rdfs:\\|sigmakee:\\)"
	      "\\(inverseOf\\|subPropertyOf\\|samePropertyAs\\|onProperty\\)"
	      "\\s-+\\(rdf:resource\\)\\s-*=\\s-*\""
	      "[^\"#]*\\([^\"]*\\)\"")
      '(1 sigmakee-normal-face t)
      '(2 sigmakee-keyword-face t)
      '(3 sigmakee-normal-face t)
      '(4 sigmakee-property-ref-face t)
      )

     ;; ID or about
     '("\\(rdf:\\|\\)\\(about\\|ID\\)[ \t]*=" 
       (1 sigmakee-normal-face t)
       (2 sigmakee-keyword-face t))

     ;;; rdf:Description, type, value with reference or id
     '("</?\\(rdf:\\)\\(Description\\|type\\|value\\)"
       (1 sigmakee-normal-face t)
       (2 sigmakee-keyword-face t))

     ;;; again, for closing
     (list (concat "<\\(\\|/\\)\\(sigmakee:\\|rdfs:\\)"
		   "\\(seeAlso\\|domain\\|range\\|inverseOf\\|"
		   "sub\\(Class\\|Property\\)Of\\|"
		   "\\(\\|to\\|has\\)Class\\|"
		   "disjointWith\\|sameClassAs\\)")
       '(1 sigmakee-keyword-face t)
       '(2 sigmakee-normal-face t)
       '(3 sigmakee-keyword-face t))

     '("<!DOCTYPE" 0 sigmakee-keyword-face t)
;;; in DOCTYPE preface
     '("<\\(!ENTITY\\)[ \t]+\\([^ \t]+\\)[ \t]+\"\\([^\"]*\\)" 
       (1 sigmakee-keyword-face t)
       (2 sigmakee-substitution-face t)
       (3 sigmakee-string-face t) 
       )
     
     ;;  sigmakee keywords that usually stand alone or have general range:
     ;;      Restriction intersectionOF disjointUnionOf equivalentTo oneOf 
     ;;      unionOf complementOf inverseOf Disjoint
     ;; and also [min|max]CardinalityQ?  or cardinality
     (list (concat "</?\\(\\|sigmakee:\\)"
		   "\\(Restriction\\|Disjoint\\|intersectionOf\\|"
		   "disjointUnionOf\\|equivalentTo\\|"
		   "oneOf\\|unionOf\\|complementOf\\|inverseOf\\)")
	   '(1 sigmakee-normal-face t)
	   '(2 sigmakee-keyword-face t)
	   )
     '("\\(rdf:\\)\\(parseType\\)\\s-*=\\s-*\"\\([^\"]*\\)\""
       (1 sigmakee-normal-face t)(2 sigmakee-other-face t)(3 sigmakee-other-face t))

     '("\\(sigmakee:\\)\\(\\(\\|minC\\|maxC\\|c\\)ardinality\\(\\|Q\\)\\)"
       (1 sigmakee-normal-face t) (2 sigmakee-other-face t))

     ;; Large-scale structure keywords 
     ;; for now, just rdf:RDF, sigmakee:Ontology, sigmakee:imports
     '("</?\\(rdf:\\|sigmakee:\\|\\)\\(RDF\\|Ontology\\|versionInfo\\|imports\\)[^>]*>?"
       (1 sigmakee-normal-face t)
       (2 sigmakee-keyword-face t))

     ;; Any tag, general rule, just after bold/italic stuff.
     ;; FOR NOW USE RULE THAT CHAR AFTER : is Capitalized if class, else property

     '("<\\(rdfs:\\)\\(label\\)[^>]*>\\([^<]*\\)</\\(rdfs:\\)\\(label\\)>" 
       (1 sigmakee-normal-face t)
       (2 sigmakee-keyword-face t)
       (3 sigmakee-string-face t)
       (4 sigmakee-normal-face t)
       (5 sigmakee-keyword-face t)
       )

     '("[ \"<>]\\(\\(http\\|file\\|ftp\\|mailto\\):[^ \t\n#>\"]*\\)" 1 sigmakee-tag-face t)

     '("</?\\([A-Za-z0-9_]+:\\|\\)\\([a-z][^ \t\n:>]*[ \t\n>]\\)" 
       (1 sigmakee-normal-face nil)
       (2 sigmakee-property-ref-face nil))

     '("</?\\([A-Za-z0-9_]+:\\|\\)\\([A-Z][^ \t\n:>]*[ \t\n>]\\)" 
       (1 sigmakee-normal-face nil) 
       (2 sigmakee-class-ref-face nil) )

     ;; any other tag
     '("<\\([^!? ][^ \t>]+\\)" 1 sigmakee-tag-face nil) 

     ;; strings are mostly URIs, so just use this for now, except for the above
     '("=[ \t\n]*\"\\([^\"]+\\)\"" 1 sigmakee-string-face nil) ;; was override= t

     ;; within rdf tag, 
     '("\\(xmlns:?\\)\\([^ \t=]*[ \t]*=\\)" 
       (1 sigmakee-normal-face t)
       (2 sigmakee-keyword-face t))
     ;; in definitions
     '("rdf:\\(\\(ID\\|about\\)[ \t]*=\\)" (1 sigmakee-keyword-face t))

     ;; slashes in end tags and empty end tags
     '("<\\(/\\)" 1 sigmakee-keyword-face t)
     '("\\(/\\)>" 1 sigmakee-keyword-face t)
     

     ;; XML Comments: <!-- ... -->. They traditionally override anything else.
     ;; It's complicated 'cause we won't allow "-->" inside a comment, and
     ;; font-lock colours the *longest* possible match of the regexp.

     '("\\(<!--\\([^-]\\|-[^-]\\|--[^>]\\)*-->\\)"
       1 sigmakee-comment-face t)

     ;; things like <?xml ..?> show up as comments
     '("<[?][^?>]*[?]>"    0 sigmakee-comment-face t)

     ;; RDFS Comments - higlight the tag as we can't cross lines very well.
     '("<\\(\\|rdfs:\\)comment>.*\\(\\|^.*\\)*</\\(\\|rdfs:\\)comment>"
       0 sigmakee-comment-face t) ;; red thru line

     '("</?\\(\\|rdfs:\\)comment>"
       0 sigmakee-comment-face t) ;; if on different lines

     '("&[^;]+;" 0 sigmakee-substitution-face t)

     ;; HTML special characters
     '("&[^;\n]*;" 0 sigmakee-string-face nil)